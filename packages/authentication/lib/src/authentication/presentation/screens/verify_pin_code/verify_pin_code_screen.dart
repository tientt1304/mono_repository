// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'viewmodels/verify_pin_code_viewmodel.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:responsive_builder/responsive_builder.dart';
import 'mobile/verify_pin_code_mobile_screen.dart';
import 'tablet/verify_pin_code_tablet_screen.dart';
import 'package:core/core.dart';
import 'package:authentication/src/common/di/authentication_injectable.config.dart';

@RoutePage(name: 'verifyPinCode')
class VerifyPinCodeScreen extends StatefulWidget {
  final String phone;
  final Function(dynamic result) onVerifySuccess;

  const VerifyPinCodeScreen(
      {required this.phone, required this.onVerifySuccess, super.key});

  @override
  State<VerifyPinCodeScreen> createState() => _VerifyPinCodeScreenState();
}

class _VerifyPinCodeScreenState extends State<VerifyPinCodeScreen>
    with
        LifecycleOwner<VerifyPinCodeScreen, VerifyPinCodeViewModel>,
        ObserverMixin {
  /// handle verify response, navigate to destination route
  Future<void> _handleVerifyResponse(dynamic result) async {
    if (result == null) return;

    // clear injected dependencies
    await dropScope(diScope);
    // verification success
    widget.onVerifySuccess(result);
  }

  @override
  void observeChanges(ObserverMixin observer) {
    viewModel.params.result.observe(observer, (value) async {
      await _handleVerifyResponse(value);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // screen body
        Scaffold(
          appBar: BaseAppBar(title: 'verify_pin_code'.tr()),
          body: SafeArea(
            child: ScreenTypeLayout.builder(
              mobile: (_) => VerifyPinCodeMobileScreen(),
              tablet: (_) => VerifyPinCodeTabletScreen(),
            ),
          ),
        ),

        // full-screen loader
        LiveDataFullScreenLoader(loading: viewModel.baseParams.loading),
      ],
    );
  }

  @override
  void onInitState() {
    viewModel.params.phone = widget.phone;
    super.onInitState();
  }

  @override
  DiScope get diScope => DiScope(
        name: 'verifyPinCode',
        factory: getIt.initVerifyPinCodeScope,
        dependencies: [],
      );
}
