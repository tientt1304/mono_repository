// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:authentication/authentication.dart';
import 'package:authentication/src/common/di/authentication_injectable.config.dart';
import 'package:auto_route/auto_route.dart';
import 'package:reactive_phone_form_field/reactive_phone_form_field.dart';
import 'package:flutter/material.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:responsive_builder/responsive_builder.dart';
import 'package:core/core.dart';
import 'package:green_villas/green_villas.dart' as main;

@RoutePage(name: 'login')
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen>
    with LifecycleOwner<LoginScreen, LoginViewModel>, ObserverMixin {
  /// handle login response, navigate to verify page
  void _handleLoginResponse(dynamic result) {
    if (result == null) return;

    // login success, navigate to verify-pin-code screen
    final phone = viewModel.params.loginForm
        .getControlValue<PhoneNumber>('phone')
        ?.international;

    // widget.onLoginSuccess(phone);
    if (phone != null) {
      main.appRouter.pushToStack(VerifyPinCode(
          phone: phone,
          onVerifySuccess: (result) {
            // appRouter.pushToStack(camera.CameraList());
            main.appRouter.pushAndPopUntil(main.Home(), predicate: (route) {
              return route.settings.name == 'home';
            });
          }));
    }
  }

  @override
  void observeChanges(ObserverMixin observer) {
    viewModel.params.result.observe(observer, (value) {
      _handleLoginResponse(value);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // screen body
        Scaffold(
          body: SafeArea(
            child: ScreenTypeLayout.builder(
              mobile: (_) => LoginMobileScreen(),
              tablet: (_) => LoginTabletScreen(),
            ),
          ),
        ),

        // full-screen loader
        LiveDataFullScreenLoader(loading: viewModel.baseParams.loading),
      ],
    );
  }

  @override
  DiScope get diScope => DiScope(
        name: 'login',
        factory: getIt.initLoginScope,
        dependencies: [
          DiScope(
            name: 'authentication',
            factory: getIt.initAuthenticationScope,
          ),
        ],
      );
}
